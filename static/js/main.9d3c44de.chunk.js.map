{"version":3,"sources":["__generated__/graphql.tsx","pages/Home/store/character.ts","pages/Home/store/colorStore.ts","pages/Home/components/Character.tsx","pages/Home/components/Description.tsx","pages/Home/layouts/List/components/Item.tsx","pages/Home/layouts/List/List.tsx","pages/Home/layouts/List/index.tsx","pages/Home/store/pageStore.ts","pages/Home/index.tsx","pages/Home/root.tsx","App.tsx","constants/api.ts","index.tsx"],"names":["CacheControlScope","defaultOptions","gql","GetCharactersDocument","useCharacterStore","create","set","char","actions","set_char","by","useColorStore","color","set_color","Wrapper","styled","div","Character","s","data","usePalette","image","useEffect","lightMuted","document","body","style","backgroundColor","vibrant","className","name","status","src","alt","width","height","Description","lineHeight","length","Img","img","Item","props","onClick","children","ListCharacter","loading","error","console","log","Array","keys","map","index","p","id","List","memo","usePageStore","page","set_page","Home","baseOptions","options","Apollo","useGetCharactersLazyQuery","getCharacters","variables","pageId","handle_nextPage","useCallback","characters","info","next","handle_prevPage","prev","results","disabled","client","ApolloClient","uri","process","cache","InMemoryCache","App","rootElement","getElementById","render"],"mappings":"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","file":"static/js/main.9d3c44de.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nconst defaultOptions =  {}\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\nexport type Character = {\n  __typename?: 'Character';\n  /** The id of the character. */\n  id: Maybe<Scalars['ID']>;\n  /** The name of the character. */\n  name: Maybe<Scalars['String']>;\n  /** The status of the character ('Alive', 'Dead' or 'unknown'). */\n  status: Maybe<Scalars['String']>;\n  /** The species of the character. */\n  species: Maybe<Scalars['String']>;\n  /** The type or subspecies of the character. */\n  type: Maybe<Scalars['String']>;\n  /** The gender of the character ('Female', 'Male', 'Genderless' or 'unknown'). */\n  gender: Maybe<Scalars['String']>;\n  /** The character's origin location */\n  origin: Maybe<Location>;\n  /** The character's last known location */\n  location: Maybe<Location>;\n  /**\n   * Link to the character's image.\n   * All images are 300x300px and most are medium shots or portraits since they are intended to be used as avatars.\n   */\n  image: Maybe<Scalars['String']>;\n  /** Episodes in which this character appeared. */\n  episode: Maybe<Array<Maybe<Episode>>>;\n  /** Time at which the character was created in the database. */\n  created: Maybe<Scalars['String']>;\n};\n\nexport type Characters = {\n  __typename?: 'Characters';\n  info: Maybe<Info>;\n  results: Maybe<Array<Maybe<Character>>>;\n};\n\nexport type Episode = {\n  __typename?: 'Episode';\n  /** The id of the episode. */\n  id: Maybe<Scalars['ID']>;\n  /** The name of the episode. */\n  name: Maybe<Scalars['String']>;\n  /** The air date of the episode. */\n  air_date: Maybe<Scalars['String']>;\n  /** The code of the episode. */\n  episode: Maybe<Scalars['String']>;\n  /** List of characters who have been seen in the episode. */\n  characters: Maybe<Array<Maybe<Character>>>;\n  /** Time at which the episode was created in the database. */\n  created: Maybe<Scalars['String']>;\n};\n\nexport type Episodes = {\n  __typename?: 'Episodes';\n  info: Maybe<Info>;\n  results: Maybe<Array<Maybe<Episode>>>;\n};\n\nexport type FilterCharacter = {\n  name: Maybe<Scalars['String']>;\n  status: Maybe<Scalars['String']>;\n  species: Maybe<Scalars['String']>;\n  type: Maybe<Scalars['String']>;\n  gender: Maybe<Scalars['String']>;\n};\n\nexport type FilterEpisode = {\n  name: Maybe<Scalars['String']>;\n  episode: Maybe<Scalars['String']>;\n};\n\nexport type FilterLocation = {\n  name: Maybe<Scalars['String']>;\n  type: Maybe<Scalars['String']>;\n  dimension: Maybe<Scalars['String']>;\n};\n\nexport type Info = {\n  __typename?: 'Info';\n  /** The length of the response. */\n  count: Maybe<Scalars['Int']>;\n  /** The amount of pages. */\n  pages: Maybe<Scalars['Int']>;\n  /** Number of the next page (if it exists) */\n  next: Maybe<Scalars['Int']>;\n  /** Number of the previous page (if it exists) */\n  prev: Maybe<Scalars['Int']>;\n};\n\nexport type Location = {\n  __typename?: 'Location';\n  /** The id of the location. */\n  id: Maybe<Scalars['ID']>;\n  /** The name of the location. */\n  name: Maybe<Scalars['String']>;\n  /** The type of the location. */\n  type: Maybe<Scalars['String']>;\n  /** The dimension in which the location is located. */\n  dimension: Maybe<Scalars['String']>;\n  /** List of characters who have been last seen in the location. */\n  residents: Maybe<Array<Maybe<Character>>>;\n  /** Time at which the location was created in the database. */\n  created: Maybe<Scalars['String']>;\n};\n\nexport type Locations = {\n  __typename?: 'Locations';\n  info: Maybe<Info>;\n  results: Maybe<Array<Maybe<Location>>>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  /** Get a specific character by ID */\n  character: Maybe<Character>;\n  /** Get the list of all characters */\n  characters: Maybe<Characters>;\n  /** Get a list of characters selected by ids */\n  charactersByIds: Maybe<Array<Maybe<Character>>>;\n  /** Get a specific locations by ID */\n  location: Maybe<Location>;\n  /** Get the list of all locations */\n  locations: Maybe<Locations>;\n  /** Get a list of locations selected by ids */\n  locationsByIds: Maybe<Array<Maybe<Location>>>;\n  /** Get a specific episode by ID */\n  episode: Maybe<Episode>;\n  /** Get the list of all episodes */\n  episodes: Maybe<Episodes>;\n  /** Get a list of episodes selected by ids */\n  episodesByIds: Maybe<Array<Maybe<Episode>>>;\n};\n\n\nexport type QueryCharacterArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryCharactersArgs = {\n  page: Maybe<Scalars['Int']>;\n  filter: Maybe<FilterCharacter>;\n};\n\n\nexport type QueryCharactersByIdsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryLocationArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryLocationsArgs = {\n  page: Maybe<Scalars['Int']>;\n  filter: Maybe<FilterLocation>;\n};\n\n\nexport type QueryLocationsByIdsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type QueryEpisodeArgs = {\n  id: Scalars['ID'];\n};\n\n\nexport type QueryEpisodesArgs = {\n  page: Maybe<Scalars['Int']>;\n  filter: Maybe<FilterEpisode>;\n};\n\n\nexport type QueryEpisodesByIdsArgs = {\n  ids: Array<Scalars['ID']>;\n};\n\n\nexport type CharacterSnippetFragment = (\n  { __typename?: 'Character' }\n  & Pick<Character, 'name' | 'id' | 'image' | 'status'>\n);\n\nexport type GetCharactersQueryVariables = Exact<{\n  pageId: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type GetCharactersQuery = (\n  { __typename?: 'Query' }\n  & { characters: Maybe<(\n    { __typename?: 'Characters' }\n    & { info: Maybe<(\n      { __typename?: 'Info' }\n      & Pick<Info, 'next' | 'prev'>\n    )>, results: Maybe<Array<Maybe<(\n      { __typename?: 'Character' }\n      & Pick<Character, 'status' | 'name' | 'id' | 'image'>\n    )>>> }\n  )> }\n);\n\nexport const CharacterSnippetFragmentDoc = gql`\n    fragment CharacterSnippet on Character {\n  name\n  id\n  image\n  status\n}\n    `;\nexport const GetCharactersDocument = gql`\n    query GetCharacters($pageId: Int) {\n  characters(page: $pageId) {\n    info {\n      next\n      prev\n    }\n    results {\n      status\n      name\n      id\n      image\n    }\n  }\n}\n    `;\n\n/**\n * __useGetCharactersQuery__\n *\n * To run a query within a React component, call `useGetCharactersQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCharactersQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCharactersQuery({\n *   variables: {\n *      pageId: // value for 'pageId'\n *   },\n * });\n */\nexport function useGetCharactersQuery(baseOptions?: Apollo.QueryHookOptions<GetCharactersQuery, GetCharactersQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetCharactersQuery, GetCharactersQueryVariables>(GetCharactersDocument, options);\n      }\nexport function useGetCharactersLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetCharactersQuery, GetCharactersQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetCharactersQuery, GetCharactersQueryVariables>(GetCharactersDocument, options);\n        }\nexport type GetCharactersQueryHookResult = ReturnType<typeof useGetCharactersQuery>;\nexport type GetCharactersLazyQueryHookResult = ReturnType<typeof useGetCharactersLazyQuery>;\nexport type GetCharactersQueryResult = Apollo.QueryResult<GetCharactersQuery, GetCharactersQueryVariables>;","import create from \"zustand\";\r\nimport { CharacterSnippetFragment } from \"__generated__/graphql\";\r\n\r\ntype State = {\r\n  char: CharacterSnippetFragment | null;\r\n  actions: {\r\n    set_char: (by: CharacterSnippetFragment) => void;\r\n  };\r\n};\r\n\r\nconst useCharacterStore = create<State>((set) => ({\r\n  char: null,\r\n  actions: {\r\n    set_char: (by) => set(() => ({ char: by })),\r\n  },\r\n}));\r\n\r\nexport default useCharacterStore;\r\n","import create from \"zustand\";\r\n\r\ntype State = {\r\n  color: string;\r\n  set_color: (by: string) => void;\r\n};\r\n\r\nconst useColorStore = create<State>((set) => ({\r\n  color: \"transparent\",\r\n  set_color: (by) => set(() => ({ color: by })),\r\n}));\r\n\r\nexport default useColorStore;\r\n","import { useEffect } from \"react\";\r\nimport { usePalette } from \"react-palette\";\r\nimport styled from \"styled-components\";\r\nimport useCharacterStore from \"../store/character\";\r\nimport useColorStore from \"../store/colorStore\";\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  width: 100%;\r\n\r\n  &:after {\r\n    content: \"\";\r\n    display: block;\r\n    padding-bottom: 100%;\r\n  }\r\n`;\r\n\r\nconst Character: React.FC<{}> = () => {\r\n  const char = useCharacterStore((s) => s.char);\r\n  const { data } = usePalette(char ? char.image : \"\");\r\n  const set_color = useColorStore((s) => s.set_color);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      if (data.lightMuted)\r\n        document.body.style.backgroundColor = data.lightMuted;\r\n\r\n      if (data.vibrant) set_color(data.vibrant);\r\n    }\r\n  }, [data, set_color]);\r\n\r\n  if (!char) {\r\n    return (\r\n      <Wrapper className=\"flex items-center justify-center\">\r\n        <span>Loading...</span>\r\n      </Wrapper>\r\n    );\r\n  }\r\n  const { image, name, status } = char;\r\n\r\n  return (\r\n    <div className=\"bg-red-500\">\r\n      <img\r\n        src={image}\r\n        alt={name}\r\n        width=\"100%\"\r\n        height=\"auto\"\r\n        className={`block rounded filter ${status === \"Dead\" && \"grayscale\"}`}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Character;\r\n","import useCharacterStore from \"../store/character\";\r\n\r\ninterface DescriptionProps {}\r\n\r\nconst Description: React.FC<DescriptionProps> = () => {\r\n  const char = useCharacterStore((s) => s.char);\r\n  if (!char) {\r\n    return <div>loading...</div>;\r\n  }\r\n  const { name } = char;\r\n\r\n  return (\r\n    <div\r\n      style={{ lineHeight: \"initial\" }}\r\n      className={`md:overflow-hidden\tmd:overflow-ellipsis font-black md:text-${\r\n        name.length > 16 ? \"7\" : \"8\"\r\n      }xl text-3xl`}>\r\n      {name}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Description;\r\n","import useCharacterStore from \"pages/Home/store/character\";\r\nimport { Fragment } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { CharacterSnippetFragment } from \"__generated__/graphql\";\r\n\r\nconst Img = styled.img`\r\n  height: auto;\r\n  width: 100%;\r\n  max-width: 120px;\r\n  min-height: 120px;\r\n`;\r\n\r\nconst Item: React.FC<CharacterSnippetFragment> = (props) => {\r\n  const { name, image } = props;\r\n  const set_char = useCharacterStore((s) => s.actions.set_char);\r\n  return (\r\n    <Fragment>\r\n      <div className=\"cursor-pointer\" onClick={() => set_char(props)}>\r\n        <Img className=\"block rounded-md\" src={image} alt={name} />\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","import { ApolloError } from \"@apollo/client\";\r\nimport useCharacterStore from \"pages/Home/store/character\";\r\nimport { memo, useEffect } from \"react\";\r\nimport { CharacterSnippetFragment } from \"__generated__/graphql\";\r\nimport Item from \"./components/Item\";\r\n\r\ninterface ListCharacterProps {\r\n  data: CharacterSnippetFragment[];\r\n  loading: boolean;\r\n  error?: ApolloError;\r\n}\r\n\r\nconst Wrapper: React.FC<{}> = ({ children }) => (\r\n  <div className=\"grid grid-flow-row grid-cols-3 md:grid-cols-6 lg:grid-cols-7 place-items-center gap-4\">\r\n    {children}\r\n  </div>\r\n);\r\n\r\nconst ListCharacter: React.FC<ListCharacterProps> = ({\r\n  data,\r\n  loading,\r\n  error,\r\n}) => {\r\n  console.log(`render ListCharcter`);\r\n\r\n  const set_char = useCharacterStore((s) => s.actions.set_char);\r\n\r\n  useEffect(() => {\r\n    if (data && data.length) {\r\n      set_char(data[0]);\r\n    }\r\n  }, [data, set_char]);\r\n\r\n  if (loading)\r\n    return (\r\n      <Wrapper>\r\n        {[...(new Array(21).keys() as any)].map((index) => (\r\n          <div className=\"animate-pulse\" key={index}>\r\n            <div\r\n              style={{ width: 120, height: 120 }}\r\n              className=\"rounded-md bg-gray-300 h-full w-full\"\r\n            />\r\n          </div>\r\n        ))}\r\n      </Wrapper>\r\n    );\r\n  if (error) return <p>Error </p>;\r\n  if (!data) return <p>Sin resultados</p>;\r\n  return (\r\n    <Wrapper>\r\n      {data.map((p) => (\r\n        <Item key={p.id} {...p} />\r\n      ))}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default memo(ListCharacter);\r\n","import List from \"./List\";\r\nexport default List;\r\n","import create from \"zustand\";\r\n\r\ntype State = {\r\n  page: number;\r\n  actions: {\r\n    set_page: (by: number) => void;\r\n  };\r\n};\r\n\r\nconst usePageStore = create<State>((set) => ({\r\n  page: 1,\r\n  actions: {\r\n    set_page: (by) => set(() => ({ page: by })),\r\n  },\r\n}));\r\n\r\nexport default usePageStore;\r\n","import Home from \"./root\";\r\n\r\nexport default Home;\r\n","import { useCallback, useEffect } from \"react\";\r\nimport { useGetCharactersLazyQuery } from \"__generated__/graphql\";\r\nimport Character from \"./components/Character\";\r\nimport Description from \"./components/Description\";\r\nimport List from \"./layouts/List\";\r\nimport useColorStore from \"./store/colorStore\";\r\nimport usePageStore from \"./store/pageStore\";\r\n\r\ninterface HomeProps {}\r\nconst Home: React.FC<HomeProps> = () => {\r\n  const page = usePageStore((s) => s.page);\r\n  const set_page = usePageStore((s) => s.actions.set_page);\r\n\r\n  const color = useColorStore((s) => s.color);\r\n\r\n  const [getCharacters, { data, loading, error }] = useGetCharactersLazyQuery();\r\n\r\n  useEffect(() => {\r\n    getCharacters({\r\n      variables: {\r\n        pageId: page,\r\n      },\r\n    });\r\n  }, [getCharacters, page]);\r\n\r\n  const handle_nextPage = useCallback(() => {\r\n    if (data?.characters) {\r\n      set_page(data.characters.info.next);\r\n    }\r\n  }, [data, set_page]);\r\n\r\n  const handle_prevPage = useCallback(() => {\r\n    if (data?.characters) {\r\n      set_page(data.characters.info.prev);\r\n    }\r\n  }, [data, set_page]);\r\n  return (\r\n    <div className=\"m-auto max-w-screen-lg h-auto min-h-screen flex items-center\">\r\n      <div className=\"grid grid-cols-12 gap-5 w-full pb-3\">\r\n        <div\r\n          className=\"col-span-12 grid grid-cols-12 sticky top-0 z-10\"\r\n          style={{ backgroundColor: color }}>\r\n          <div className=\"col-span-8 flex items-end\">\r\n            <div className=\"w-full text-right\">\r\n              <Description />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"col-span-4\">\r\n            <Character />\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"col-span-12\">\r\n          <List\r\n            data={data ? data.characters.results : []}\r\n            loading={loading}\r\n            error={error}\r\n          />\r\n        </div>\r\n\r\n        <div\r\n          className=\"col-span-12 text-center font-black sticky bottom-0\"\r\n          style={{ backgroundColor: color }}>\r\n          <div className=\"text-center font-black\">\r\n            <span>{page}</span>\r\n          </div>\r\n          <div className=\"grid grid-cols-12 \">\r\n            <div className=\"col-span-6\">\r\n              <button\r\n                className={`uppercase w-full btn ${\r\n                  !data || (!data.characters.info.prev && \"opacity-50\")\r\n                }`}\r\n                onClick={handle_prevPage}\r\n                disabled={!data || !data.characters.info.prev}>\r\n                prev\r\n              </button>\r\n            </div>\r\n            <div className=\"col-span-6\">\r\n              <button\r\n                className={`uppercase w-full btn ${\r\n                  !data || (!data.characters.info.next && \"opacity-50\")\r\n                }`}\r\n                onClick={handle_nextPage}\r\n                disabled={!data || !data.characters.info.next}>\r\n                next\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { ApolloProvider } from \"@apollo/client/react\";\nimport { ApolloClient, InMemoryCache } from \"@apollo/client/core\";\nimport Home from \"pages/Home\";\nimport { __BASE_URL__ } from \"constants/api\";\n\nconst client = new ApolloClient({\n  uri: __BASE_URL__,\n  cache: new InMemoryCache(),\n});\n\nexport default function App() {\n  return (\n    <ApolloProvider client={client}>\n      <Home />\n    </ApolloProvider>\n  );\n}\n","export const __BASE_URL__ = process.env.REACT_APP_BASE_URL;\r\n","import \"./styles.css\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}